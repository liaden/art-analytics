# frozen_string_literal: true

describe Event do
  it { is_expected.to validate_presence_of(:started_at) }
  it { is_expected.to validate_presence_of(:ended_at) }
  it { is_expected.to validate_presence_of(:name) }

  it { is_expected.to be_kind_of(Importable) }

  it "validates end is after start" do
    expect(build(:event, started_at: Date.tomorrow, ended_at: Date.yesterday)).to be_invalid
  end

  it "can start and end on the same day" do
    expect(build(:event, started_at: Date.today, ended_at: Date.today)).to be_valid
  end

  describe '#full_name' do
    let!(:event) { create(:event, name: 'derp') }

    it 'updates with started_at' do
      actually_started_at = event.started_at - 1.year
      event.update(started_at: actually_started_at)
      expect(event.reload.full_name).to eq "derp-#{actually_started_at.year}"
    end

    it 'updates with name' do
      event.update(name: 'changed')
      expect(event.reload.full_name).to eq "changed-#{event.started_at.year}"
    end

    it 'is autogenerated on insert' do
      generated_name = "derp-#{event.started_at.year}"
      expect(event.reload.full_name).to eq generated_name
    end

    it 'requires unique year and name' do
      event2 = build(:event, name: 'derp', started_at: event.started_at - 1.month)

      # in case of january, just go opposite direction
      if event2.started_at.year != event.started_at.year
        event2.ended_at  += 1.month
        event2.started_at = event.started_at + 1.month
      end

      expect { event2.save! }.to raise_error(ActiveRecord::RecordNotUnique)
    end
  end
end
